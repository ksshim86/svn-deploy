package com.ks.sd.schd;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.tmatesoft.svn.core.SVNLogEntry;
import org.tmatesoft.svn.core.SVNLogEntryPath;

import com.ks.sd.api.pjt.entity.Project;
import com.ks.sd.api.pjt.entity.SubProject;
import com.ks.sd.api.pjt.service.ProjectService;
import com.ks.sd.api.rev.dto.SdPathSaveRequest;
import com.ks.sd.api.rev.dto.SdRevisionSaveRequest;
import com.ks.sd.api.rev.entity.SdPath;
import com.ks.sd.api.rev.repository.SdPathRepository;
import com.ks.sd.api.rev.repository.SdRevisionRepository;
import com.ks.sd.util.svn.SvnRepositoryUtil;

@Service
public class SvnHistoryLoaderService {
    private final static Logger LOGGER = LoggerFactory.getLogger(SvnHistoryLoaderService.class);

    @Autowired
    private ProjectService projectService;

    @Autowired
    private SdRevisionRepository sdRevisionRepository;

    @Autowired
    private SdPathRepository sdPathRepository;
    
    @Transactional
    public void run(Integer pjtNo) {
        final int ZERO = 0;
        final int BATCH_SIZE_100 = 100;

        // 프로젝트 정보 조회
        Project project = projectService.getProjectByPjtNo(pjtNo);
        List<SubProject> subProjects = project.getSubProjects();
        String pjtNm = project.getPjtNm();
        String pjtKey = project.getPjtKey();
        String devSvnUrl = project.getDevSvnUrl();
        String svnUsername = project.getSvnUsername();
        String svnPassword = project.getSvnPassword();
        Long dcr = project.getDcr(); // 개발 SVN 현재 리비전
        Long startRev = dcr + 1; // 수집 시작 리비전

        
        LOGGER.info("Thread started for Project: {}({})", pjtNm, pjtKey);
        subProjects.forEach(subProject -> {
            LOGGER.info("Sub Project: {}", subProject.getSubPjtNm());
        });

        LOGGER.info("Dev svn url of the Project: {}", devSvnUrl);

        // 최신 리비전(HEAD) 조회
        Long latestRev = SvnRepositoryUtil.getLatestRevision(devSvnUrl, svnUsername, svnPassword);

        LOGGER.info("Starting collection from revision {} up to HEAD({}) revision", startRev, latestRev);

        // 수집할 리비전 수
        int collectionRevCnt = (int) (latestRev - startRev + 1);

        // 수집할 새로운 리비전이 있는지 확인
        if (ZERO == collectionRevCnt) {
            LOGGER.info("No new revision to collect");
            return;
        }

        // 리비전 수집은 최대 100개씩 수행. 100개씩 수행할 경우, 수행 횟수 계산
        int loopCnt = (collectionRevCnt / BATCH_SIZE_100) + ((collectionRevCnt % BATCH_SIZE_100) > 0 ? 1 : 0);
        // int loopCnt = (int) Math.ceil((double) collectionRevCnt / BATCH_SIZE_100);
        
        // 리비전 수집
        for (int i = 0; i < loopCnt; i++) {
            // 수집할 리비전 범위 계산
            Long endRev = startRev + BATCH_SIZE_100 - 1;

            // 수집할 리비전 범위가 최신 리비전을 넘어가는 경우, 최신 리비전으로 설정
            if (endRev > latestRev) {
                endRev = latestRev;
            }

            // 리비전 수집
            List<SVNLogEntry> logEntryList = SvnRepositoryUtil.fetchSvnLog(devSvnUrl, svnUsername, svnPassword, startRev, endRev);
            
            logEntryList.forEach(logEntry -> {
                // 리비전 커밋 일시를 LocalDateTime으로 변환
                LocalDateTime revDt = LocalDateTime.ofInstant(logEntry.getDate().toInstant(), ZoneId.systemDefault());
                
                SdRevisionSaveRequest sdRevisionSaveRequest = 
                    SdRevisionSaveRequest.builder()
                        .pjtNo(pjtNo)
                        .revNo((int) logEntry.getRevision())
                        .author(logEntry.getAuthor())
                        .revDt(revDt)
                        .msg(logEntry.getMessage())
                        .build();

                // 리비전 저장
                sdRevisionRepository.save(sdRevisionSaveRequest.toEntity());

                List<SdPath> sdPaths = new ArrayList<SdPath>();
                AtomicInteger idx = new AtomicInteger(1);

                // 리비전에 포함된 파일/디렉토리 정보 저장
                logEntry.getChangedPaths().entrySet().stream().sorted(Comparator.comparing(Map.Entry::getKey)).forEachOrdered(item -> {
                    SVNLogEntryPath entryPath = item.getValue();
                    Integer ordr = idx.getAndIncrement();
                    String fullPath = entryPath.getPath();
                    String filePath;
                    String fileNm;

                    // 파일/디렉토리 경로와 이름 분리
                    int lastSlashIndex = fullPath.lastIndexOf("/");
                    filePath = fullPath.substring(0, lastSlashIndex);
                    fileNm = fullPath.substring(lastSlashIndex + 1);

                    String copyFilePath = null;
                    String copyFileNm = null;
                    Integer copyRevNo = null;
                    
                    // 파일/디렉토리 복사 정보가 있는 경우, 복사 정보 분리
                    if (entryPath.getCopyPath() != null) {
                        String copyFullPath = entryPath.getCopyPath();
                        copyFilePath = copyFullPath.substring(0, copyFullPath.lastIndexOf("/"));
                        copyFileNm = copyFullPath.substring(copyFullPath.lastIndexOf("/") + 1, copyFullPath.length());
                        copyRevNo = (int) entryPath.getCopyRevision();
                    }

                    // 파일/디렉토리 종류 구분
                    String kind = entryPath.getKind().toString().equals("dir") ? "D" : "F";

                    SdPathSaveRequest sdPathSaveRequest = 
                        SdPathSaveRequest.builder()
                            .pjtNo(pjtNo)
                            .revNo((int) logEntry.getRevision())
                            .ordr(ordr)
                            .action(Character.toString(entryPath.getType()))
                            .kind(kind)
                            .filePath(filePath)
                            .fileNm(fileNm)
                            .copyFilePath(copyFilePath)
                            .copyFileNm(copyFileNm)
                            .copyRevNo(copyRevNo)
                            .build();

                    // 서브 프로젝트인 경우, 서브 프로젝트 번호 설정
                    int subPjtNo = checkSubProjectConditions(subProjects, filePath, fileNm);
                    if (0 < subPjtNo) {
                        sdPathSaveRequest.setSubPjtNo(pjtNo);
                    }

                    sdPaths.add(sdPathSaveRequest.toEntity());
                });
                
                // 파일/디렉토리 정보 저장
                sdPathRepository.saveAll(sdPaths);
            });

            // 다음 수집 범위 계산
            startRev = endRev + 1;
        }

        // 개발 현재 리비전 갱신
        project.updateDcr(latestRev);
    }

    private int checkSubProjectConditions(List<SubProject> subProjects, String filePath, String fileNm) {
        for (SubProject subProject : subProjects) {
            String subPjtNm = subProject.getSubPjtNm();
    
            boolean condition1 = subPjtNm.equals(fileNm);
            boolean condition2 = filePath.startsWith("/") && filePath.substring(1).startsWith(subPjtNm);
    
            if (condition1 || condition2) {
                return subProject.getSubPjtNo();
            }
        }
    
        return -1;
    }
}
